name: Deploy Fabric Pipeline Dev → Test

on:
  workflow_dispatch:   # Manual trigger, or add push/cron if you want

jobs:
  promote-dev-to-test:
    runs-on: ubuntu-latest

    env:
      TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      DEPLOYMENT_PIPELINE_ID: ${{ secrets.FABRIC_PIPELINE_ID }}
      DEV_STAGE_ID: ${{ secrets.FABRIC_DEV_STAGE_ID }}
      TEST_STAGE_ID: ${{ secrets.FABRIC_TEST_STAGE_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get Fabric API token
        id: get_token
        run: |
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "client_id=$CLIENT_ID" \
            --data-urlencode "scope=https://api.fabric.microsoft.com/.default" \
            --data-urlencode "client_secret=$CLIENT_SECRET" \
            --data-urlencode "grant_type=client_credentials" \
            "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token" | jq -r .access_token)

          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to get token"; exit 1
          fi
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Promote Dev → Test
        run: |
          BODY=$(jq -n \
            --arg src "$DEV_STAGE_ID" \
            --arg tgt "$TEST_STAGE_ID" \
            --arg note "GitHub Actions promote Dev to Test" \
            '{sourceStageId:$src, targetStageId:$tgt, note:$note}')

          echo "Promoting from Dev ($DEV_STAGE_ID) to Test ($TEST_STAGE_ID)..."

          RESP=$(curl -s -i -X POST \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "https://api.fabric.microsoft.com/v1/deploymentPipelines/${DEPLOYMENT_PIPELINE_ID}/deploy")

          echo "$RESP"
